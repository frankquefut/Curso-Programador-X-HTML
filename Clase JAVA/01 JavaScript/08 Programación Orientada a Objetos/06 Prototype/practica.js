/*function Auto(modelo, a√±o, marca) {
    this.modelo = modelo;
    this.a√±o = a√±o;
    this.marca = marca;
    this.info = function() {
        return this.modelo + " - "+ this.marca + " - " + this.a√±o;
    }
}

const auto1 = new Auto('Modelo 3', 2021, 'Tesla');
const auto2 = new Auto('Hummer EV', 2022, 'GMC');

console.log(auto1.info());
console.log(auto2 .info());*/

function Auto(modelo, a√±o, marca) {
    this.modelo = modelo;
    this.a√±o = a√±o;
    this.marca = marca;
}

Auto.prototype.info = function() {
        return this.modelo + " - "+ this.marca + " - " + this.a√±o;
    }

const auto1 = new Auto('Modelo 3', 2021, 'Tesla');
const auto2 = new Auto('Hummer EV', 2022, 'GMC');

console.log(auto1.info());
console.log(auto2.info());


/*

Prototype

PRO TIP üëâ Uno de los errores m√°s comunes al usar Prototype 
en JavaScript es no entender que todas las instancias de una 
funci√≥n comparten el mismo prototipo. Por eso, no es recomendado 
almacenar valores que pueden cambiar en el prototipo. 
As√≠ que el pro tip ser√≠a: utiliza el prototipo para m√©todos y 
propiedades que son compartidas por todas las instancias, pero 
no para aquellas que sean √∫nicas para cada instancia.


RETO ‚Ñπ
Crea un objeto 'Persona' con una propiedad 'nombre' y un 
m√©todo 'saludar' que imprima 'Hola, mi nombre es <nombre>' 
en la consola.

function Persona(nombre) {
	this.nombre = nombre;
    
}

Persona.prototype.saludar = function() {
    console.log('Hola, mi nombre es' + this.nombre);
}



*/