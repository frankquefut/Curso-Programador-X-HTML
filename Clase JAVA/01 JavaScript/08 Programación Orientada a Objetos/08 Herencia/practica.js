function Padre(nombre, apellido, soy) {
    this.nombre = nombre;
    this.apellido = apellido;
    this.soy = soy;
}

Padre.prototype.saludo = function() {
    console.log(`Soy ${this.nombre} ${this.apellido} y soy ${this.soy}`);
}

function Hijo(nombre, apellido, soy, tengo) {
    Padre.call(this, nombre, apellido, soy);
    this.tengo = tengo;
}

Hijo.prototype = Padre.prototype;
Hijo.prototype.saludoHijo = function() {
    console.log(`Soy ${this.nombre} ${this.apellido} y soy ${this.soy} y tengo ${this.tengo} a√±os`);    
}

const padre = new Padre('Ramon Antonio Gerardo', 'Estevez', 'el padre');
const hijo = new Hijo('Carlos Irwin', padre.apellido, 'el hijo', 55);

//console.log(padre);
//console.log(hijo);

padre.saludo();
hijo.saludoHijo();





// Herencia

/*
En el siguiente video veremos la sintaxis moderna 
que es mucho m√°s simple as√≠ que no tienes que 
profundizar mucho en este video pero puede ser 
√∫til si deseas saber como funciona detr√°s de 
escena.

Este es otro ejemplo para reforzar tus 
conocimientos:


function Animal(nombre) {
   this.nombre = nombre;
}

// creo un m√©todo para Animal
Animal.prototype.obtenerNombre = function() {
    return this.nombre;
}

function Mamifero(nombre, tienePelo) {
    // hereda la propiedad nombre de Animal
    Animal.call(this, nombre);
    this.tienePelo = tienePelo;
}
// hereda los m√©todos de Animal
Mamifero.prototype = Object.create(Animal.prototype);

// creo un m√©todo para Mamifero
Mamifero.prototype.obtenerTienePelo = function() {
    return this.tienePelo;
}

function Perro(nombre, raza) {
    // hereda la propiedad nombre de Mamƒ´fero
    Mamifero.call(this, nombre, true);
    this.raza = raza;
}

// hereda los m√©todos de Mamifero
Perro.prototype = Object.create(Mamifero.prototype);

// creo un m√©todo para Perro
Perro.prototype.obtenerRaza = function() {
    return this.raza;
}

var firulais = new Perro('Firulais', 'Labrador');

console.log(firulais.obtenerNombre());  // 'Firulais'
console.log(firulais.obtenerTienePelo()); // true
console.log(firulais.obtenerRaza()); // 'Labrador'


Este puede ser un tema bastante complejo as√≠ que 
aqu√≠ dejo un recurso para leer m√°s a profundidad 
con ejemplos:

https://developer.mozilla.org/es/docs/Learn/JavaScript/Objects/Classes_in_JavaScript


PRO TIP üëâ Evita la confusi√≥n entre la Herencia 
y la Composici√≥n. Recuerda que la Herencia es 
√∫til para relaciones "es un tipo de", pero con 
JavaScript, suele ser m√°s efectivo usar 
Composici√≥n para relaciones "tiene un". Con la 
composici√≥n, puedes construir objetos m√°s 
flexibles y manejables que con la herencia 
estricta.



RETO ‚Ñπ
Crea un objeto 'perro' con un m√©todo 'ladra' que 
imprima 'guau' en la consola. 'perro'se debe 
crear a partir de una clase funcional 'Perro'. 
Aseg√∫rate que 'Perro' herede de la clase 'Animal' 
y llama a su m√©todo 'ladra' al final.



function Animal() {
}

function Perro(){}
 Perro.prototype = new Animal();
 Perro.prototype.ladra = function() {
     console.log('guau');
 };

const perro = new Perro();
perro.ladra();
*/