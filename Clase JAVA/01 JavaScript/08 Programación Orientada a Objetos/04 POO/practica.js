let auto1 = {
    modelo: 'Modelo 3',
    a√±o: 2021,
    marca: 'Tesla'
};

let auto2 = {
    modelo: 'Hummer EV',
    a√±o: 2022,
    marca: 'GMC'
};

let servicio = {
    nombre: 'Transforma modelos a mayusculas',
    transformar: function(auto) {
        auto.modelo = auto.modelo.toUpperCase()
    }
};

servicio.transformar(auto2);
console.log(auto2);



/*
POO
En resumen la programaci√≥n orientada a objetos es transformar 
objetos del mundo real a c√≥digo (esto lo explico a detalle en 
el video de POO). Todos los videos de esa secci√≥n te permiten 
aprender herramientas para realizar estas transformaciones de 
 maneras m√°s eficientes.

Por ejemplo puedo crear objetos del mundo real como un auto, 
un animal, un perro, una persona, una direcci√≥n, un usuario. 
Y cada uno de estos objetos van a tener propiedades y m√©todos. 
Como propiedades puedes tener: un auto gris, un animal peque√±o, 
un perro salchicha, una direcci√≥n en Seattle, un usuario con el 
nombre Seigi. Y cada uno de esto objetos tambi√©n pueden tener 
m√©todos o acciones como: un perro que ladra, un auto que se mueve, 
un usuario que escribe.

Esta es la idea fundamental pero hay otras herramientas que son 
√∫tiles como la herencia. Por ejemplo el objeto perro puede heredar 
del objeto animal, y el objeto gato tambi√©n. Pero el objeto perro no 
deber√≠a heredar del objeto gato porque son diferentes.


Ejemplo

const nova = {
  marca: 'Huawei',
  modelo: 'Nova 10 Pro',
  a√±o: 2021
}

const iphone = {
  marca: 'Apple',
  modelo: 'iPhone 14 Pro',
  a√±o: 2022
}

const servicioActualizador = {
  nombre: 'Actualiza a iPhone 14 Pro Max',
  actualizar: function(celular) {
    const copia = JSON.parse(JSON.stringify(celular));
    copia.modelo = 'iPhone 14 Pro Max';
    return copia;
  }
}

console.log(iphone);
console.log(servicioActualizador.actualizar(iphone));



PRO TIP üëâ Al trabajar con programaci√≥n orientada a objetos (POO) en JavaScript, la confusi√≥n con el 
valor de "this" se encuentra entre los errores m√°s comunes. Por lo tanto, mi consejo es: 
siempre ten claro a qu√© se est√° refiriendo "this" en tus m√©todos. Si es necesario, 
utiliza m√©todos vinculados o funciones de flecha para mantener su contexto correcto.



RETO ‚Ñπ
Crea un objeto que represente un lenguaje de programaci√≥n con las 
siguientes propiedades: nombre, a√±o, autor, y una funci√≥n obtenerInfo() 
que retorne una cadena de texto: JavaScript fue creado en 1995 por Brendan Eich.


const javascript = {
    nombre:'JavaScript',
    a√±o: 1995,
    autor:'Brendan Eich',
    obtenerInfo() {
        return `${this.nombre} fue creado en ${this.a√±o} por ${this.autor}.`;
}
};


*/

