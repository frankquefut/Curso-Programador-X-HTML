let promesa = new Promise((reciboDatos, noReciboDatos) => {
    setTimeout(() => {
        reciboDatos('datos');
    }, 5000);
});


promesa
    .then(texto => texto.toUpperCase())
    .then(texto => texto + '!!!')
    .then(texto => console.log(texto))
    .catch(problema => console.log('Error: ' + problema))
    .finally(() => console.log('Todo Listo!!'));


    console.log('Quiero ejecutar lo mas pronto posible');
    

/*
Promesas
Este es un ejemplo que simula como funciona un pedido asÃ­ncrono a un 
servidor y podemos obtener una resoluciÃ³n (usando resolve) o un error 
(usando reject):


const status = 200;

const promesa = new Promise((resolve, reject) => {
  if (status === 200) return resolve("Respuesta recibida");
  reject('Error del Servidor');
});

promesa
  .then(respuesta => console.log(`Ã‰xito: ${respuesta}`))
  .catch(error => console.log(`Error: ${error}`));


  PRO TIP ðŸ‘‰ Uno de los errores mÃ¡s comunes al utilizar Promesas 
  en JavaScript es no manejar errores adecuadamente. Para evitarlo, 
  siempre asegÃºrate de incluir un bloque .catch al final de tu cadena 
  de promesas para manejar cualquier error que pueda surgir durante la 
  ejecuciÃ³n. Esto garantizarÃ¡ que cualquier problema sea tratado de 
  manera adecuada y evitarÃ¡ que el cÃ³digo se cuelgue si algo no va bien.


RETO â„¹
Crea una promesa simple que resuelva al texto 'Ã‰xito'

 new Promise(resolve => 
  resolve('Ã‰xito')
);


*/