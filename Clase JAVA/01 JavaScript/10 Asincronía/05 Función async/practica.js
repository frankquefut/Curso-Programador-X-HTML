let promesa = new Promise((reciboDatos, noReciboDatos) => {
    setTimeout(()=>{
        reciboDatos('datos');
    }, 5000);
});


async function asincrona() {
   let resultado = await promesa;
   console.log(resultado.toUpperCase()); 
}


/*
(async function asincrona() {
   let resultado = await promesa;
   console.log(resultado.toUpperCase()); 
})();
*/

asincrona();
/* El unico requisito para usar await esque este codigo
debe de estar dentro de una funcion y tenemos que
indicar que esa funcion es asincrona*/



/*
Funci√≥n async
La palabra clave await solo es v√°lida dentro de las 
funciones as√≠ncronas (async). Si la usas fuera 
de una funci√≥n as√≠ncrona, obtendr√° un error 
SyntaxError.

PRO TIP üëâ No utilices async sin el acompa√±amiento
 de try/catch. Muchos nuevos programadores omiten 
 el uso de bloques try/catch alrededor de su 
 c√≥digo async, lo que puede llevar a errores no 
 controlados. Para manejar adecuadamente las 
 promesas rechazadas, siempre utiliza 
 async/await dentro de un bloque try/catch.

 

RETO ‚Ñπ
Observa la siguiente imagen. En el lado izquierdo 
se encuentra la ilustraci√≥n web del ejercicio y del 
lado derecho una ilustraci√≥n de la promesa para 
mostrarte lo que esta sucediendo antes del 
ejercicio que realizar√°s a continuaci√≥n.

Crea la funci√≥n 'recibirCelulares' utilizando 
async/await, esta debe guardar en la constante 
'celulares' lo retornado de la funci√≥n 'obtenerDatos' 
de la imagen e imprimir su contenido en la consola. 
Una vez realizada la funci√≥n ejec√∫tala en la 
siguiente l√≠nea.


async function recibirCelulares() {
    const celulares = await obtenerDatos();
    console.log(celulares);
}

recibirCelulares();

*/