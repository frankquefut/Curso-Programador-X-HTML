let promesa1 = new Promise((reciboDatos, noReciboDatos) => {
    setTimeout(() =>{ reciboDatos('datos1'); }, 5000);
});

let promesa2 = new Promise((reciboDatos, noReciboDatos) => {
    setTimeout(() =>{ reciboDatos('datos2'); }, 2000);
});

Promise.all([promesa1, promesa2])
    .then(([resultado1, resultado2])=>{
        console.log(resultado1);
        return resultado2
    })
    .then(resultado2 => {
        console.log(resultado2.toUpperCase())
    });


/* 
Multiples Promesas

Para concatenar los resultados, utiliza el 
mÃ©todo 'Promise.all', el cual recibe un arreglo 
de promesas y regresa una nueva promesa que se 
resuelve cuando todas las promesas del arreglo 
se han resuelto.

PRO TIP ðŸ‘‰ En lugar de anidar varios bloques 
then() uno tras otro, utiliza Promise.all(). 
Esto te permitirÃ¡ manejar mÃºltiples promesas 
al mismo tiempo y te facilitarÃ¡ el manejo de 
los errores.

RETO â„¹
Vemos un par de promesas que se resuelven, 
una despuÃ©s de 1 segundo y otra que despuÃ©s 
de 2 segundos. Concatena los resultados 
cuando se hayan cumplido las promesas e 
imprÃ­melos.


const promesa1 = new Promise((resolve) => {
	setTimeout(() => { resolve('Hola'); }, 1000);
});
const promesa2 = new Promise((resolve) => {
	setTimeout(() => { resolve('Mundo') }, 2000);
});

Promise.all([promesa1, promesa2])
    .then(([result1, result2])=>{
        console.log(result1 + '' +result2);
    
    });



*/    